// Package authserviceclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package authserviceclient

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// GetAuthProviderCallbackParams defines parameters for GetAuthProviderCallback.
type GetAuthProviderCallbackParams struct {
	// State The state parameter containing redirect URI and anti-CSRF token.
	State string `form:"state" json:"state"`
}

// GetAuthProviderLoginParams defines parameters for GetAuthProviderLogin.
type GetAuthProviderLoginParams struct {
	// RedirectUri The URI to redirect the user to after authentication.
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthStatus request
	GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthProviderCallback request
	GetAuthProviderCallback(ctx context.Context, provider string, params *GetAuthProviderCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthProviderLogin request
	GetAuthProviderLogin(ctx context.Context, provider string, params *GetAuthProviderLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthProviderLogout request
	PostAuthProviderLogout(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthProviderToken request
	GetAuthProviderToken(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthProviderCallback(ctx context.Context, provider string, params *GetAuthProviderCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthProviderCallbackRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthProviderLogin(ctx context.Context, provider string, params *GetAuthProviderLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthProviderLoginRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthProviderLogout(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthProviderLogoutRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthProviderToken(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthProviderTokenRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthStatusRequest generates requests for GetAuthStatus
func NewGetAuthStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthProviderCallbackRequest generates requests for GetAuthProviderCallback
func NewGetAuthProviderCallbackRequest(server string, provider string, params *GetAuthProviderCallbackParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthProviderLoginRequest generates requests for GetAuthProviderLogin
func NewGetAuthProviderLoginRequest(server string, provider string, params *GetAuthProviderLoginParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/%s/login", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthProviderLogoutRequest generates requests for PostAuthProviderLogout
func NewPostAuthProviderLogoutRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/%s/logout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthProviderTokenRequest generates requests for GetAuthProviderToken
func NewGetAuthProviderTokenRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthStatusWithResponse request
	GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error)

	// GetAuthProviderCallbackWithResponse request
	GetAuthProviderCallbackWithResponse(ctx context.Context, provider string, params *GetAuthProviderCallbackParams, reqEditors ...RequestEditorFn) (*GetAuthProviderCallbackResponse, error)

	// GetAuthProviderLoginWithResponse request
	GetAuthProviderLoginWithResponse(ctx context.Context, provider string, params *GetAuthProviderLoginParams, reqEditors ...RequestEditorFn) (*GetAuthProviderLoginResponse, error)

	// PostAuthProviderLogoutWithResponse request
	PostAuthProviderLogoutWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*PostAuthProviderLogoutResponse, error)

	// GetAuthProviderTokenWithResponse request
	GetAuthProviderTokenWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetAuthProviderTokenResponse, error)
}

type GetAuthStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]bool
}

// Status returns HTTPResponse.Status
func (r GetAuthStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthProviderLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthProviderLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProviderLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthProviderLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthProviderLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthProviderLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthProviderTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessToken  *string `json:"access_token,omitempty"`
		ExpiresIn    *int    `json:"expires_in,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAuthProviderTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProviderTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthStatusWithResponse request returning *GetAuthStatusResponse
func (c *ClientWithResponses) GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error) {
	rsp, err := c.GetAuthStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthStatusResponse(rsp)
}

// GetAuthProviderCallbackWithResponse request returning *GetAuthProviderCallbackResponse
func (c *ClientWithResponses) GetAuthProviderCallbackWithResponse(ctx context.Context, provider string, params *GetAuthProviderCallbackParams, reqEditors ...RequestEditorFn) (*GetAuthProviderCallbackResponse, error) {
	rsp, err := c.GetAuthProviderCallback(ctx, provider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthProviderCallbackResponse(rsp)
}

// GetAuthProviderLoginWithResponse request returning *GetAuthProviderLoginResponse
func (c *ClientWithResponses) GetAuthProviderLoginWithResponse(ctx context.Context, provider string, params *GetAuthProviderLoginParams, reqEditors ...RequestEditorFn) (*GetAuthProviderLoginResponse, error) {
	rsp, err := c.GetAuthProviderLogin(ctx, provider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthProviderLoginResponse(rsp)
}

// PostAuthProviderLogoutWithResponse request returning *PostAuthProviderLogoutResponse
func (c *ClientWithResponses) PostAuthProviderLogoutWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*PostAuthProviderLogoutResponse, error) {
	rsp, err := c.PostAuthProviderLogout(ctx, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthProviderLogoutResponse(rsp)
}

// GetAuthProviderTokenWithResponse request returning *GetAuthProviderTokenResponse
func (c *ClientWithResponses) GetAuthProviderTokenWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetAuthProviderTokenResponse, error) {
	rsp, err := c.GetAuthProviderToken(ctx, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthProviderTokenResponse(rsp)
}

// ParseGetAuthStatusResponse parses an HTTP response from a GetAuthStatusWithResponse call
func ParseGetAuthStatusResponse(rsp *http.Response) (*GetAuthStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthProviderCallbackResponse parses an HTTP response from a GetAuthProviderCallbackWithResponse call
func ParseGetAuthProviderCallbackResponse(rsp *http.Response) (*GetAuthProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthProviderLoginResponse parses an HTTP response from a GetAuthProviderLoginWithResponse call
func ParseGetAuthProviderLoginResponse(rsp *http.Response) (*GetAuthProviderLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthProviderLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthProviderLogoutResponse parses an HTTP response from a PostAuthProviderLogoutWithResponse call
func ParsePostAuthProviderLogoutResponse(rsp *http.Response) (*PostAuthProviderLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthProviderLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthProviderTokenResponse parses an HTTP response from a GetAuthProviderTokenWithResponse call
func ParseGetAuthProviderTokenResponse(rsp *http.Response) (*GetAuthProviderTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthProviderTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessToken  *string `json:"access_token,omitempty"`
			ExpiresIn    *int    `json:"expires_in,omitempty"`
			RefreshToken *string `json:"refresh_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
